import { identity } from '@fxts/core';
import path from 'path';
import os from 'os';
import TerserPlugin from 'terser-webpack-plugin';
import nodeExternals from 'webpack-node-externals';
import MiniCssExtractPlugin from 'mini-css-extract-plugin';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
import { WebpackManifestPlugin } from 'webpack-manifest-plugin';
import { type StartServerOptions } from './startServer';
import { type Configuration } from 'webpack';
import { CleanWebpackPlugin } from 'clean-webpack-plugin';
import { VanillaExtractPlugin } from '@vanilla-extract/webpack-plugin';

import { getPackageType } from './getPackageVersion';
import { getLocalIdent } from './util';

const exclude = (notExternalModules?: RegExp[]) => (module: string) => {
  if (
    notExternalModules
      ?.map((regexp) => {
        return regexp.test(module);
      })
      .filter(identity).length
  ) {
    return false;
  }

  return module.includes('node_modules');
};

export const serverConfigs = ({
  dir,
  isDev,
  serverEntry,
  sassOptions,
  showBundleAnalyzer,
  internalModules,
  serverWebpackFinal,
  publicPath,
  serverDynamicChunk,
  name,
  watchToIgnorePaths,
}: StartServerOptions): Configuration => {
  const type = getPackageType({ cwd: dir });

  const devtool = isDev ? 'eval-cheap-module-source-map' : 'source-map';
  publicPath = isDev ? '/static/' : (publicPath ?? '/static/');

  const entry = serverDynamicChunk
    ? {
        main: {
          import: path.join(dir, serverEntry ?? 'src/server/server.ts'),
          asyncChunks: true,
        },
      }
    : path.join(dir, serverEntry ?? 'src/server/server.ts');

  const plugins: any[] = [
    new MiniCssExtractPlugin({
      ignoreOrder: true,
    }),
    new WebpackManifestPlugin({
      fileName: 'manifest.json',
    }),
    new VanillaExtractPlugin({ outputCss: false, identifiers: 'debug' }),
  ];

  if (!isDev) {
    plugins.push(new CleanWebpackPlugin());
  }

  if (showBundleAnalyzer) {
    plugins.push(new BundleAnalyzerPlugin({ analyzerPort: 8889 }));
  }

  const config: Configuration = {
    name: 'server',
    devtool,
    entry,
    mode: isDev ? 'development' : 'production',
    module: {
      rules: [
        {
          test: /\.(svg|ico|jpg|jpeg|png|apng|gif|eot|otf|webp|ttf|woff|woff2|cur|ani|pdf)(\?.*)?$/,
          type: 'asset/resource',
          generator: {
            publicPath: `${publicPath}public/`,
            outputPath: '../client/public',
          },
        },
        {
          test: /\.[tj]s$/,
          use: {
            loader: path.resolve(__dirname, '../../compiled/swc-loader'),
            options: {
              jsc: {
                parser: {
                  syntax: 'typescript',
                  decorators: true,
                  dynamicImport: true,
                },
              },
            },
          },
        },
        {
          test: /\.module\.(sa|sc|c)ss$/i,
          exclude: exclude(internalModules),
          use: [
            { loader: MiniCssExtractPlugin.loader, options: { emit: false } },
            {
              loader: path.resolve(__dirname, '../../compiled/css-loader/cjs.js'),
              options: {
                modules: {
                  getLocalIdent: getLocalIdent,
                },
              },
            },
            {
              loader: path.resolve(__dirname, '../../compiled/sass-loader/cjs.js'),
              options: {
                api: sassOptions?.api ?? 'modern-compiler',
                sassOptions,
                additionalData: sassOptions?.additionalData,
              },
            },
          ],
        },
        {
          test: /\.(sa|sc|c)ss$/i,
          exclude: [exclude(internalModules), /\.module\.(sa|sc|c)ss$/i, /\.vanilla\.css$/i],
          use: [
            { loader: MiniCssExtractPlugin.loader, options: { emit: false } },
            {
              loader: path.resolve(__dirname, '../../compiled/css-loader/cjs.js'),
              options: {
                modules: {
                  getLocalIdent: (_, __, localName: string) => localName,
                },
              },
            },
            {
              loader: path.resolve(__dirname, '../../compiled/sass-loader/cjs.js'),
              options: {
                api: sassOptions?.api ?? 'modern-compiler',
                sassOptions,
                additionalData: sassOptions?.additionalData,
              },
            },
          ],
        },
        {
          test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
          use: [
            { loader: MiniCssExtractPlugin.loader, options: { emit: false } },
            {
              loader: path.resolve(__dirname, '../../compiled/css-loader/cjs.js'),
              options: {
                url: false, // Required as image imports should be handled via JS/TS import statements
              },
            },
          ],
        },
      ],
    },
    target: 'node',
    experiments: {
      outputModule: true,
      topLevelAwait: true,
    },
    externalsPresets: { node: true }, // in order to ignore built-in modules like path, fs, etc.
    externals: [
      nodeExternals({
        allowlist: internalModules ?? [],
        importType: type === 'module' ? 'module' : 'commonjs',
      }),
    ],
    optimization: {
      removeAvailableModules: false,
      removeEmptyChunks: false,
      innerGraph: true,
      splitChunks: serverDynamicChunk
        ? {
            chunks: 'initial',
          }
        : {
            cacheGroups: {
              bundle: {
                name: 'main',
                minChunks: 2,
              },
            },
          },
    },
    output: {
      pathinfo: false,
      filename: '[id]_[contenthash].js',
      chunkFilename: '[id]_[contenthash].js',
      path: path.resolve(dir, `.rune/${isDev ? 'dev' : 'prod'}/${name}/server`),
      assetModuleFilename: '[name]_[contenthash][ext]',
      publicPath: '',
      libraryTarget: type === 'module' ? 'module' : 'commonjs2',
      module: type === 'module',
      chunkFormat: type === 'module' ? 'module' : 'commonjs',
      chunkLoading: serverDynamicChunk ? (type === 'module' ? 'import' : 'require') : undefined,
      clean: isDev,
    },
    resolve: {
      extensions: ['.ts', '.js', '.json'],
    },
    cache: isDev && {
      type: 'filesystem',
      allowCollectingMemory: true,
      cacheDirectory: path.resolve(dir, `node_modules/.cache/rune/${name}/server`),
      buildDependencies: {
        config: [__filename],
      },
    },
    snapshot: isDev
      ? {
          managedPaths: [path.resolve(dir, 'node_modules')],
          immutablePaths: [],
          buildDependencies: {
            timestamp: true,
            hash: false,
          },
          module: {
            timestamp: true,
            hash: false,
          },
          resolve: {
            timestamp: true,
            hash: false,
          },
        }
      : undefined,
    plugins,
    watchOptions: {
      aggregateTimeout: 1000,
      ignored: ['**/.rune', '**/node_modules', ...(watchToIgnorePaths ?? [])],
    },
    stats: 'none',
    infrastructureLogging: {
      level: 'error',
    },
    parallelism: os.cpus().length - 1,
  };

  if (!isDev) {
    config.optimization = config.optimization || {};
    config.optimization.nodeEnv = process.env.NODE_ENV;

    config.optimization.minimize = true;
    config.optimization.minimizer = [
      new TerserPlugin({
        parallel: true,
        extractComments: false,
        terserOptions: {
          mangle: {
            keep_classnames: true,
            keep_fnames: true,
          },
        },
      }),
    ];
  }

  if (serverWebpackFinal) {
    return serverWebpackFinal(config, isDev);
  } else {
    return config;
  }
};

export const clientConfigs = ({
  dir,
  isDev,
  clientEntry,
  sassOptions,
  showBundleAnalyzer,
  publicPath,
  clientWebpackFinal,
  dynamicChunk,
  internalModules,
  name,
  watchToIgnorePaths,
}: StartServerOptions): Configuration => {
  const devtool = isDev ? 'eval-cheap-module-source-map' : 'hidden-source-map';

  const entry = path.join(dir, clientEntry ?? 'src/app/app.ts');

  publicPath = isDev ? '/static/' : (publicPath ?? '/static/');

  const plugins: any[] = [
    new MiniCssExtractPlugin({
      filename: '[id]_[contenthash].css',
      chunkFilename: '[id]_[contenthash].css',
      ignoreOrder: true,
    }),
    new WebpackManifestPlugin({
      fileName: 'manifest.json',
    }),
    new VanillaExtractPlugin({ outputCss: true, identifiers: 'debug' }),
  ];

  if (showBundleAnalyzer) {
    plugins.push(new BundleAnalyzerPlugin({ analyzerPort: 8888 }));
  }

  const optimization: Configuration['optimization'] = dynamicChunk
    ? {
        removeAvailableModules: false,
        removeEmptyChunks: false,
        runtimeChunk: 'single',
        moduleIds: 'named',
        splitChunks: {
          cacheGroups: {
            vendor: {
              name: 'vendors',
              test: /[\\/]node_modules[\\/]/,
              chunks: 'all',
            },
            main: {
              name: 'main',
              test: /\.module\.(sa|sc|c)ss$/i,
              chunks: 'initial',
            },
            common: {
              name: 'common',
              test: /^(?!.*\.module\.scss$).*\.scss$/,
              enforce: true,
            },
          },
        },
      }
    : {
        removeAvailableModules: false,
        removeEmptyChunks: false,
        runtimeChunk: 'single',
        moduleIds: 'deterministic',
        splitChunks: {
          cacheGroups: {
            bundle: {
              name: 'main',
              minChunks: 2,
            },
            vendors: {
              name: 'vendors',
              test: /[\\/]node_modules[\\/]/,
              chunks: 'all',
            },
            main: {
              name: 'main',
              test: /\.module\.(sa|sc|c)ss$/i,
              chunks: 'all',
              enforce: true,
              priority: 10, // 우선순위 설정
            },
            common: {
              name: 'common',
              test: /^(?!.*\.module\.scss$).*\.scss$/,
              chunks: 'all',
              enforce: true,
              priority: 10, // 우선순위 설정
            },
          },
        },
      };

  const config: Configuration = {
    name: 'client',
    devtool,
    entry,
    experiments: {
      topLevelAwait: true,
    },
    mode: isDev ? 'development' : 'production',
    module: {
      rules: [
        {
          test: /\.(svg|ico|jpg|jpeg|png|apng|gif|eot|otf|webp|ttf|woff|woff2|cur|ani|pdf)(\?.*)?$/,
          type: 'asset/resource',
        },
        {
          test: /\.[tj]s$/,
          exclude: /node_modules\/.*\.[tj]s$/,
          use: {
            loader: path.resolve(__dirname, '../../compiled/swc-loader'),
            options: {
              $schema: 'https://json.schemastore.org/swcrc',
              jsc: {
                parser: {
                  syntax: 'typescript',
                  decorators: true,
                  dynamicImport: true,
                },
              },
            },
          },
        },
        {
          test: /\.module\.(sa|sc|c)ss$/i,
          exclude: exclude(internalModules),
          use: [
            MiniCssExtractPlugin.loader,
            {
              loader: path.resolve(__dirname, '../../compiled/css-loader/cjs.js'),
              options: {
                modules: {
                  getLocalIdent: getLocalIdent,
                },
              },
            },
            {
              loader: path.resolve(__dirname, '../../compiled/sass-loader/cjs.js'),
              options: {
                api: sassOptions?.api ?? 'modern-compiler',
                sassOptions,
                additionalData: sassOptions?.additionalData,
              },
            },
          ],
        },
        {
          test: /\.(sa|sc|c)ss$/i,
          exclude: [exclude(internalModules), /\.module\.(sa|sc|c)ss$/i, /\.vanilla\.css$/i],
          use: [
            MiniCssExtractPlugin.loader,
            {
              loader: path.resolve(__dirname, '../../compiled/css-loader/cjs.js'),
              options: {
                modules: {
                  getLocalIdent: (_, __, localName: string) => localName,
                },
              },
            },
            {
              loader: path.resolve(__dirname, '../../compiled/sass-loader/cjs.js'),
              options: {
                api: sassOptions?.api ?? 'modern-compiler',
                sassOptions,
                additionalData: sassOptions?.additionalData,
              },
            },
          ],
        },
        {
          test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
          use: [
            MiniCssExtractPlugin.loader,
            {
              loader: path.resolve(__dirname, '../../compiled/css-loader/cjs.js'),
              options: {
                url: false, // Required as image imports should be handled via JS/TS import statements
                sourceMap: true,
              },
            },
          ],
        },
      ],
    },
    target: ['web'],
    externalsPresets: {
      web: true,
      webAsync: true,
    },
    optimization,
    output: {
      pathinfo: false,
      filename: '[id]_[contenthash].js',
      chunkFilename: '[id]_[contenthash].js',
      path: path.resolve(dir, `.rune/${isDev ? 'dev' : 'prod'}/${name}/client`),
      clean: isDev,
      publicPath,
      assetModuleFilename: 'public/[name]_[contenthash][ext]',
    },
    cache: isDev && {
      type: 'filesystem',
      allowCollectingMemory: true,
      cacheDirectory: path.resolve(dir, `node_modules/.cache/rune/${name}/client`),
      buildDependencies: {
        config: [__filename],
      },
    },
    snapshot: isDev
      ? {
          managedPaths: [path.resolve(dir, 'node_modules')],
          immutablePaths: [],
          buildDependencies: {
            timestamp: true,
            hash: false,
          },
          module: {
            timestamp: true,
            hash: false,
          },
          resolve: {
            timestamp: true,
            hash: false,
          },
        }
      : undefined,
    resolve: {
      extensions: ['.ts', '.js', '.json'],
    },
    plugins,
    watchOptions: {
      aggregateTimeout: 1000,
      ignored: ['**/.rune', '**/node_modules', '**/server', ...(watchToIgnorePaths ?? [])],
    },
    stats: 'none',
    infrastructureLogging: {
      level: 'error',
    },
    parallelism: os.cpus().length - 1,
  };

  if (!isDev) {
    config.optimization = config.optimization || {};
    config.optimization.nodeEnv = process.env.NODE_ENV;

    config.optimization.minimize = true;
    config.optimization.minimizer = [
      new TerserPlugin({
        parallel: true,
        extractComments: false,
        terserOptions: {
          mangle: {
            keep_classnames: true,
            keep_fnames: true,
          },
        },
      }),
    ];
  }

  if (clientWebpackFinal) {
    return clientWebpackFinal(config, isDev);
  } else {
    return config;
  }
};
